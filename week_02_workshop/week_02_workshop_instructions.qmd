---
title: "Workshop 2: Automated Data Analysis & Reporting"
format: html
author: "The Graph Courses"
---

# Introduction

Welcome to another session of your Generative AI Workshop! In this session, you'll use Data Analysis AI tools to compile a brief report (HTML or PDF) analyzing the relationship between two chosen country indicators from the Gapminder data repository here: [https://gapminder.org/data](https://gapminder.org/data){target="_blank"}.

## Your final report should contain:

1.  A world map visualization of your first selected indicator (for the chosen recent year).
2.  A world map visualization of your second selected indicator (for the chosen recent year).
3.  A scatterplot showing the relationship between your two chosen indicators.
4.  A description and interpretation of the relationship between the two indicators. This may include a correlation coefficient (e.g., Pearson's $r$) if appropriate, or a qualitative description based on the scatterplot.
5. A short reflection written by you about the process of interacting with the AI tools. E.g. What was easy? What was difficult? What was surprising? What did you learn?

Note that rather than grading the technical precision of the report (we understand that you are not all data analysts), we will simply check that you have followed the overall instructions and written an honest reflection.

## Tool Tracks

You will choose one of the following tools based on your coding experience:

*   **Students WITH significant coding experience in R:** You should use **Cursor**, an AI-powered code editor, with R.

*   **Students WITHOUT significant coding experience:** You will use **Julius**, a more user-friendly AI data analysis tool with a chat interface.

*   **If you finish your assigned tool track early, you are encouraged to try the other one!**

---

# Part 1: General Setup & Data Selection (All Students)

1.  **Choose Your Data:**
    *   Go to Gapminder's data repository: [https://gapminder.org/data](https://gapminder.org/data){target="_blank"}
    *   Browse the indicators and **select TWO indicators** that you hypothesize might be related.
        *   *Think about what story you want to explore. For example, a famous relationship is GDP per capita vs. Life Expectancy. Consider other potential meaningful connections.*
    *   For each chosen indicator, download the data as a CSV file.

2.  **Data Preparation Note: Data will be subsetted to a single year:**
    *   After loading your data into Cursor or Julius, you will ask the AI to **subset it to the most recent year that has good data coverage**. "Good data coverage" means not too many missing values. When browsing on Gapminder, try to identify a specific recent year you'd like to focus on that has good coverage for both your chosen indicators, and make a note of this year.

---

# Part 2: Tool-Specific Instructions

Please follow the instructions for the tool assigned to your group.

## Section A: For Students WITH Coding Experience (Using Cursor with R)

You will use Cursor to generate an R Markdown report.

1.  **Setup Cursor:**

    *   You'll need to set up Cursor and can use their free 14-day trial.

    *   **Watch our setup video before you begin:** [AI Automated Data Analysis with R and Cursor (for R users only)](https://thegraphcourses.org/courses/aiw-2025-q2/topics/ai-automated-data-analysis-with-r-and-cursor-for-r-users-only/){target="_blank"}

2. **Project folder:**

    *   Create a new project folder on your computer. Place the two CSV files you downloaded from Gapminder into this folder.

3.  **Generating Your Report in Cursor:**

    *   Open your project folder in Cursor. Create a new R Markdown (`.Rmd`) file with an appropriate name.
    *   Before using the Agent, it's recommended to change the model to **Claude 3.7 Sonnet** for better performance with R. You can usually find this setting in a dropdown menu associated with the chat or agent interface.
    *   Then use Cursor's "Agent Mode" to help you write the R code and narrative.

    *   **Initial Agent Prompt Idea:**
        Here is an example of an initial agent prompt:

        ```
        You are an AI agent that creates data reports.
        You create reports by writing code to an Rmarkdown file (with github_document output), knitting that file, then reading the output md file to validate your work.
        You repeat this edit, knit, review loop until the reporting task is achieved.
        Use plots, tables, and inline R code where appropriate.
        Code should be hidden from the output.
        ```
    *   **Specific Task Prompting Example:**

        ```
        Now create a data report in my Rmd file using the two datasets I've provided ([indicator1] and [indicator2]).

        The report should:
        1. Load both datasets.
        2. For each indicator, subset the data to `[CHOSEN_YEAR]`.
        3. Create a world map visualization for the first indicator.
        4. Create a world map visualization for the second indicator.
        5. Merge the data for the two indicators.
        6. Create a scatterplot showing the relationship between these two indicators.
        7. Provide a brief interpretation of the relationship shown in the scatterplot (you can calculate Pearson's correlation coefficient $$r$$ if it's helpful).
        Ensure all plots are clearly titled and labeled.

        ```

    *   **Iterate and Refine:** Work with the agent to refine the figures and text until you are happy with the report. You can ask it to change the title of a plot, or to use a different color scheme, for example.

    *   **Halluciations related to plots:** Cursor cannot see your plots. It may hallucinate interpretations of the plots that are inaccurate. You can ignore these.

    *   **A Note on AI Interaction:**
        *   If the AI seems to be going off track or taking too long, look for a "stop" button (often near the prompt input box) to interrupt it.
        *   Often, if you don't like the output, it's more effective to go back to your previous prompt, edit it to be clearer or more specific, and resubmit, rather than trying to correct the AI with a long series of follow-up messages. Longer conversations can sometimes confuse the AI.

    *   **Troubleshooting R Package Installations:**
        *   If Cursor has persistent trouble installing R packages, you might need to install them manually. Create a temporary R script (`.R`) file in your project. In this script, use the `install.packages("package_name")` command for each required package. Run this script. R might ask you to choose a CRAN mirror (a server to download from); pick any. Once the packages are installed, you can delete the temporary R script.

4.  **Add Your Reflection:** Before your final knit, make sure to add your short reflection (point 5 from "Your final report should contain") directly into your R Markdown file. This should be part of the narrative of your report.

5.  **Final Output:** Your primary submission will be the HTML file generated from knitting your R Markdown file. (That is, while your AI agent will output the report as an .md file while it is working, you should change the output format when you are done and ready to submit. To do this, in your .Rmd file, change `output: github_document` to `output: html_document` in the header section before your final knit.)

## Section B: For Students WITHOUT Prior Coding Experience (Using Julius)

You will use Julius, an AI data analysis chat-based tool, to analyze your data and generate content for your report.

1.  **Setup Julius:**

    *   Go to [Julius.ai](https://julius.ai/){target="_blank"} and sign up.
    *   For a 2-week trial of premium features, go to your **Settings**, then **Usage**, and under **Institutional Codes**, enter: `GRAPHAIR`
    *   **Please do not share this code.**

2.  **Starting Your Analysis in Julius:**
    *   Start a new "thread" in Julius.
    *   **Select your tools:**
        *   **Code Language:** Julius can use Python or R. If you have no preference, we recommend selecting **R**. The default figures from R are often a bit nicer, and more members of The Graph team are R experts, so we can better assist with debugging if needed. The code language changer is usually found at the top left of the Julius window.
        *   **AI Model:** It's recommended to switch to the **Claude 3.7 Sonnet** model for potentially better results. The model selection is typically in a dropdown menu below the prompt input box.
    *   Now, **upload your two CSV files** to the conversation.

3.  **Chatting with Julius (Example Prompt):**

    *   **Chat with Julius Example Prompt:**

        ```
        I am writing a report on the relationship between the indicators [indicator1] and [indicator2]. Both datasets have been added.

        Please help me do the following:
        1. Load both datasets.
        2. For each indicator, subset the data to `[CHOSEN_YEAR]`.
        3. Create a world map visualization for the first indicator.
        4. Create a world map visualization for the second indicator.
        5. Now merge the data for the chosen indicators.
        6. Create a scatterplot showing the relationship between these two indicators.
        7. Provide a brief interpretation of the relationship shown in the scatterplot (you can calculate Pearson's correlation coefficient $$r$$ if it's helpful).
        Make sure the plots have good titles and labels.
        ```


    *   **Review and Refine:** Julius will show its steps, data, and plots. Work with it to refine the figures and text until you are happy with the output plots. You can ask it to change the title of a plot, or to use a different color scheme, for example.

    *   **A Note on AI Interaction:**
        *   If the AI seems to be going off track or taking too long, look for a "stop" button (often near the prompt input box) to interrupt it.
        *   Often, if you don't like the output, it's more effective to go back to your previous prompt, edit it to be clearer or more specific, and resubmit, rather than trying to correct the AI with a long series of follow-up messages. Longer conversations can sometimes confuse the AI.

4.  **Creating Your Report Document:**
    *   **Download Outputs:** Download the individual plots (as images, e.g., PNG) that Julius generates. You will also copy any key text outputs, such as data summaries or interpretations.
    *   **Create a DOCX/GDocs file:** Open a word processor (like Microsoft Word, Google Docs, or Pages) and create a new document.
    *   **Assemble initial report content:**
        *   Add a title, your name, and the date.
        *   Insert the plots you downloaded.
        *   Paste in the relevant text outputs from Julius.
        *   Organize this content into a clean and readable report.

5.  **Add Your Reflection:**
    *   Before finalizing your report, add your short reflection (point 5 from "Your final report should contain") to your document.

6.  **Final Output:**
    *   **Export as PDF** from your word processor. This PDF is your primary submission.

---

# Part 3: Submission

*   Upload your final report file (HTML or PDF) to the designated submission link on the course workshop page.

---

# Part 4: Optional - Add to Your GitHub Pages Portfolio

As a final step, you can add your report to your portfolio website which you created earlier in the course.

1.  **Upload your Report:** Add your final report file (HTML or PDF) to the GitHub repository that hosts your portfolio website.

2.  **Get the Link:** Once uploaded, navigate to the file in your GitHub repository and copy its direct link.

3.  **Update Your Portfolio with ChatGPT:**

    *   Go back to the ChatGPT conversation you used to build your portfolio website. (If you don't have it, you can start a new one, provide ChatGPT with your existing `index.html` file content, and then give it the new instructions).
    *   Ask ChatGPT to add a new entry for this workshop. For example:

        ```
        Please update my portfolio website. I want to add a new project for "Workshop 2: Automated Data Analysis".
        Include a brief description like "Analyzed Gapminder data to explore relationships between two global indicators using AI tools."
        Then, add a link to my report: [paste the direct link to your uploaded report file here]
        ```

    *   ChatGPT will provide you with updated `index.html` code. Replace the content of your `index.html` file in your GitHub repository with this new code. Commit and push the changes.
    *   Verify that your live GitHub Pages site now shows the new entry and the link works.
